type contractEntryPoints = 
| ["Refill", tez]
| ["Drain"]
;

type balance = tez;
type storage = {
  total_tokens : tez,
  players : big_map<address, balance>
};
type return_ = [list<operation>, storage];


let refill = ([store, n] : [storage, balance]) : storage => {
  if (Tezos.amount != n) {
    failwith("Transferred token amount does not match the parameter") as storage
  } else {

    let total_amount : tez = store.total_tokens;

    if (Tezos.amount > (total_amount)) {
      return ({...store,
        total_tokens : total_amount + Tezos.amount,
        players : Big_map.update(Tezos.sender as address, Some(Tezos.amount), store.players)});
    } else {
      return store;
    }
    
  }
}

let drain = (store: storage) : storage => {
  if (Tezos.amount > (0 as tez)) {
    failwith ("Sending token when calling drain is not allowed") as storage
  } else {
    let empty : big_map<address, balance> = Big_map.empty;
    return ({...store, total_tokens: (0 as tez), players: empty});
  }
}

let main = ([action, store]: [contractEntryPoints, storage]): return_ => {

  let operations: list<operation> = (list([]) as list<operation>);

  let receiver : contract<unit> =
    match (Tezos.get_contract_opt(Tezos.sender) as option<contract<unit>>, {
      Some: (contract: contract<unit>) => contract,
      None: () => (failwith("no contract") as contract<unit>)
    });

  let operations_ : list<operation> = match (action, {
    Refill: (_n: tez) => operations,
    Drain : () => list([Tezos.transaction(unit, Tezos.balance, receiver), ...operations]),
  });

  return [
    operations_,
    match (action, {
      Refill: (n: tez) => refill ([store, n]),
      Drain : () => drain (store)
    })
  ];

}
